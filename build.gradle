plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
    id 'com.gradleup.shadow' version '8.3.8'
}

group = 'site.pwing'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc-repo"
        url = "https://repo.papermc.io/repository/maven-public/"
    }
    maven {
        name = "phoenix"
        url = "https://nexus.phoenixdevt.fr/repository/maven-public/"
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.8-R0.1-SNAPSHOT")
    implementation("org.xerial:sqlite-jdbc:3.46.0.0")

    // Optional hooks (compileOnly): MythicLib + MMOItems from PhoenixDevelopment repo
    compileOnly("io.lumine:MythicLib-dist:1.6.2-SNAPSHOT")
    compileOnly("net.Indyuce:MMOItems-API:6.9.5-SNAPSHOT")
}

tasks {
    runServer {
        // Configure the Minecraft version for our task.
        // This is the only required configuration besides applying the plugin.
        // Your plugin's jar (or shadowJar if present) will be used automatically.
        minecraftVersion("1.21")
    }
    shadowJar {
        archiveClassifier.set('')
        minimize()
    }
    build {
        dependsOn shadowJar
    }
}

// Unified example client JAR that works on both Forge and NeoForge by merging
// the two example subproject jars into one. Each loader will pick its own
// metadata (mods.toml vs neoforge.mods.toml) and ignore the other. The JVM only
// loads classes on demand, so unused loader-specific classes being present is fine.
import org.gradle.api.file.DuplicatesStrategy

tasks.register('unifiedClientExampleJar', Jar) {
    group = 'build'
    description = 'Creates a single jar that contains both the Forge and NeoForge example mods.'
    // Ensure example jars are built first
    dependsOn(':examples:forge-example:jar', ':examples:neoforge-example:jar')

    // Pull in the built jars from the subprojects
    def forgeJarProvider = project(':examples:forge-example').tasks.named('jar')
    def neoJarProvider = project(':examples:neoforge-example').tasks.named('jar')

    // Merge their contents
    from({ zipTree(forgeJarProvider.get().archiveFile.get().asFile) })
    from({ zipTree(neoJarProvider.get().archiveFile.get().asFile) })

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    archiveBaseName.set('pwingcurios-client-unified')
    destinationDirectory.set(layout.buildDirectory.dir('libs'))
}

// Make the root build also produce the unified client jar
tasks.named('build') {
    dependsOn(tasks.named('unifiedClientExampleJar'))
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
